---
# Configure the wicked network manager

- name: Construct a map of hardware addresses to interface names from Ansible facts
  ansible.builtin.set_fact:
    homeinfra_sidecar_addressed_interface:
      name: "{{ homeinfra_sidecar_interface_name }}"
      macaddress: "{{ hostvars[inventory_hostname]['ansible_' + homeinfra_sidecar_interface_name]['macaddress'] }}"
  register: homeinfra_sidecar_matched_interfaces
  loop: "{{ ansible_interfaces | reject('equalto', 'lo') }}"
  loop_control:
    loop_var: homeinfra_sidecar_interface_name

- name: Check that the specs entirely match the detected MAC addresses
  ansible.builtin.assert:
    that: >
      homeinfra_sidecar_matched_interfaces.results |
      map(attribute='ansible_facts') |
      map(attribute='homeinfra_sidecar_addressed_interface') |
      map(attribute='macaddress') |
      symmetric_difference(
        homeinfra_sidecar_network_adapters |
        map(attribute='macaddress')
      ) | length == 0
    fail_msg: There is a discrepancy between the specified MAC address(es) and the detected one(s)

- name: Flatten the map of hardware addresses down to a dictionary
  ansible.builtin.set_fact:
    homeinfra_sidecar_addressed_interfaces: >
      {{ homeinfra_sidecar_matched_interfaces.results |
         map(attribute='ansible_facts') |
         map(attribute='homeinfra_sidecar_addressed_interface') |
         items2dict(key_name='macaddress', value_name='name') }}

- name: Write ifcfg network configuration file for each adapter
  ansible.builtin.template:
    src: "etc/sysconfig/network/ifcfg-IFNAME.j2"
    dest: "/etc/sysconfig/network/ifcfg-{{ homeinfra_sidecar_addressed_interfaces[homeinfra_sidecar_selected_adapter.macaddress] }}"
    backup: yes
  loop: "{{ homeinfra_sidecar_network_adapters }}"
  loop_control:
    loop_var: homeinfra_sidecar_selected_adapter
  notify: wicked ifreload (if this fails, check the IP address)

- name: Flush handlers before continuing
  ansible.builtin.meta: flush_handlers

...
