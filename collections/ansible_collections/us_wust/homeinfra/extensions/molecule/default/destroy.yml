---
- name: Destroy
  hosts: localhost
  connection: local
  gather_facts: false
  # no_log: "{{ molecule_no_log }}"
  tasks:
    - name: Identify virtual machines in VMware Workstation Pro / Fusion Pro
      qsypoq.vmware_desktop.unix_vmware_desktop_vminfos:
        username: "{{ lookup('env', 'HOMEINFRA_TEST_API_USERNAME') }}"
        password: "{{ lookup('env', 'HOMEINFRA_TEST_API_PASSWORD') }}"
        api_url: "{{ lookup('env', 'HOMEINFRA_TEST_API_URL') }}"
        api_port: "{{ lookup('env', 'HOMEINFRA_TEST_API_PORT') }}"
      register: homeinfra_test_vms

    - name: Shut down the cloned virtual machine, if it exists
      qsypoq.vmware_desktop.unix_vmware_desktop_power:
        target_vm: "{{ homeinfra_test_vm.id }}"
        username: "{{ lookup('env', 'HOMEINFRA_TEST_API_USERNAME') }}"
        password: "{{ lookup('env', 'HOMEINFRA_TEST_API_PASSWORD') }}"
        api_url: "{{ lookup('env', 'HOMEINFRA_TEST_API_URL') }}"
        api_port: "{{ lookup('env', 'HOMEINFRA_TEST_API_PORT') }}"
        # This needs to be a string, so YAML doesn't treat it as a bool
        state: "off"
      loop_control:
        loop_var: homeinfra_test_vm
      loop: "{{ homeinfra_test_vms.msg }}"
      when: "(homeinfra_test_vm.path | basename) == (lookup('env', 'HOMEINFRA_TEST_CLONE_VMNAME') ~ '.vmx')"

    - name: Delete the cloned virtual machine, if it exists
      qsypoq.vmware_desktop.unix_vmware_desktop_vmmgmt:
        target_vm: "{{ homeinfra_test_vm.id }}"
        username: "{{ lookup('env', 'HOMEINFRA_TEST_API_USERNAME') }}"
        password: "{{ lookup('env', 'HOMEINFRA_TEST_API_PASSWORD') }}"
        api_url: "{{ lookup('env', 'HOMEINFRA_TEST_API_URL') }}"
        api_port: "{{ lookup('env', 'HOMEINFRA_TEST_API_PORT') }}"
        action: delete
      loop_control:
        loop_var: homeinfra_test_vm
      loop: "{{ homeinfra_test_vms.msg }}"
      when: "(homeinfra_test_vm.path | basename) == (lookup('env', 'HOMEINFRA_TEST_CLONE_VMNAME') ~ '.vmx')"

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config
      ansible.builtin.set_fact:
        instance_conf: {}

    - name: Dump instance config
      ansible.builtin.copy:
        content: |
          # Molecule managed

          {{ instance_conf | to_json | from_json | to_yaml }}
        dest: "{{ molecule_instance_config }}"
        mode: "0600"
      when: server.changed | default(false) | bool  # noqa no-handler
